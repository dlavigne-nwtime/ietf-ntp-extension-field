<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC5905 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5905.xml">
<!ENTITY RFC5906 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5906.xml">
<!ENTITY RFC7821 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7821.xml">
<!ENTITY RFC2827 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2827.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2434 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2434.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-ietf-ntp-extension-fields-01" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="Network Time Protocol Version 4 (NTPv4) Extension Fields">Network Time Protocol Version 4 (NTPv4) Extension Fields
    </title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Tal Mizrahi" initials="T." surname="Mizrahi">
      <organization>Marvell</organization>

      <address>
        <postal>
          <street>6 Hamda St.</street>

          <!-- Reorder these if your country does things differently -->

          <city>Yokneam, 20692</city>

          <region/>

          <country>Israel</country>
        </postal>

        <phone/>

        <email>talmi@marvell.com</email>
      </address>
    </author>

    <author fullname="Danny Mayer" initials="D." surname="Mayer">
      <organization>Network Time Foundation</organization>

      <address>
        <postal>
          <street>P.O. Box 918</street>

          <!-- Reorder these if your country does things differently -->

          <city>Talent, OR</city>

          <region/>

          <code>97540</code>

          <country>US</country>
        </postal>

        <phone/>

        <email>mayer@ntp.org</email>
      </address>
    </author>

    <author fullname="Harlan Stenn" initials="H." surname="Stenn">
      <organization>Network Time Foundation</organization>

      <address>
        <postal>
          <street>P.O. Box 918</street>

          <!-- Reorder these if your country does things differently -->

          <city>Talent, OR</city>

          <region/>

          <code>97540</code>

          <country>US</country>
        </postal>

        <phone/>

        <email>stenn@nwtime.org</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

<!-- other authors -->

    <date month="March" year="2016"/>

    <!-- If the month and year are both specified and are the current ones,
         xml2rfc will fill in the current day for you. If only the current
         year is specified, xml2rfc will fill in the current day and month
         for you. If the year is not the current one, it is necessary to
         specify at least a month (xml2rfc assumes day="1" if not specified
         for the purpose of calculating the expiry date).  With drafts it is
         normally sufficient to specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working
         Group", which is used by the RFC Editor as a nod to the history of
         the IETF. -->

    <keyword>NTP</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t> Network Time Protocol version 4 (NTPv4) defines the optional usage
	of extension fields.  An extension field, as defined
	in <xref target="RFC5905">RFC 5905</xref>, resides after the end of
	the NTP header, and supplies optional capabilities or information
	that is not conveyed in the standard NTP header.  This document
	updates <xref target="RFC5905">RFC 5905</xref> by clarifying some
	points regarding NTP extension fields and their usage with legacy
	Message Authentication Codes (MACs).
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The NTP header format consists of a set of fixed fields that may be
	followed by optional fields.  Two types of optional fields are
	defined: extension fields as defined in Section 7.5
	of <xref target="RFC5905">RFC 5905</xref>, and legacy Message
	Authentication Codes (legacy MACs).</t>

      <t>If a legacy MAC is used, it resides at the end of the packet.  This
	field can be either a 4-octet crypto-NAK, or data that is usually 20
	or 24 octets long.</t>

      <t>NTP extension fields are defined in <xref target="RFC5905">RFC
	  5905</xref> as a generic mechanism that allows the addition of
	  future extensions and features without modifying the NTP header
	  format (Section 16 of <xref target="RFC5905">RFC 5905</xref>).</t>

      <t>Section 7.5 of <xref target="RFC5905">RFC 5905</xref> clearly
	states that "one or more extension fields can be inserted after
	the header and before the MAC, which is always present when an
	extension field is present."  However, the experimental Checksum
	Complement <xref target="RFC7821">RFC 7821</xref> cannot be used if
	the NTP packet contains a MAC.</t>

      <t>To allow for extension fields that do not require a MAC changes to
	the NTPv4 specification must be made.  [Err3627] was an attempt to
	clarify the rules around MACs, but it does a suboptimal job of
	this.</t>

      <t>This document better specifies and clarifies both Extention Fields
	and the requirements and parsing of a legacy MAC, with changes to
	address errors found after the publication of [NTPv4] with respect
	to extension fields.  Specifically, this document updates Section
	7.5 of [NTPv4], clarifying the relationship between extension fields
	and MACs, and defines the behavior of a host that receives an
	unknown extension field.</t>
    </section>

    <section title="Conventions Used in This Document">
      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>
      </section>
      <section title="Terms and Abbreviations">
        <t>MAC - Message Authentication Code</t>
	<t>NTPv4 - Network Time Protocol, Version
          4 <xref target="RFC5905">RFC 5905</xref></t>
      </section>
    </section>

    <section title="NTP Extension Fields - RFC 5905 Update">
      <t>This document updates Section 7.5 of RFC 5905 as follows:</t>

      <section title="OLD: 7.5 NTP Extension Field Format">
	<t>In NTPv4, one or more extension fields can be inserted after the
	  header and before the MAC, which is always present when an
	  extension field is present.  Other than defining the field format,
	  this document makes no use of the field contents.  An extension
	  field contains a request or response message in the format shown
	  in Figure 14.</t>

      <t><figure title="Figure 14: Extension Field Format">
          <artwork name="Figure 14: Extension Field Format"><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+-------------------------------+ 
|          Field Type           |        Field Length           |
+-------------------------------+-------------------------------+ 
.                                                               .
.                             Value                             .
.                                                               .
+-------------------------------+-------------------------------+ 
|                       Padding (as needed)                     | 
+---------------------------------------------------------------+]]></artwork>
        </figure></t>
      <t>All extension fields are zero-padded to a word (four octets)
      boundary.  The Field Type field is specific to the defined
      function and is not elaborated here.  While the minimum field
      length containing required fields is four words (16 octets), a
      maximum field length remains to be established.</t>

      <t>The Length field is a 16-bit unsigned integer that indicates the
	length of the entire extension field in octets, including the
	Padding field.</t>
      </section>

      <section title="NEW: 7.5 NTP Extension Field Format">
	<t>In NTPv4, one or more extension fields can be inserted after the
	  header and before the possibly optional MAC, which is usually
	  present when an extension field is present.  A MAC is always
	  present in some form when NTP packets are authenticated.  This MAC
	  can be either a legacy MAC, or a MAC-EF.  Other than defining the
	  field format, this document makes no use of the field contents.
	  An extension field contains a request or response message in the
	  format shown in Figure 14.</t>

      <t><figure title="Figure 14: Extension Field Format">
          <artwork name="Figure 14: Extension Field Format"><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+-------------------------------+ 
|          Field Type           |        Field Length           |
+-------------------------------+-------------------------------+ 
.                                                               .
.                             Value                             .
.                                                               .
+-------------------------------+-------------------------------+ 
|                       Padding (as needed)                     | 
+---------------------------------------------------------------+]]></artwork>
        </figure></t>
      <t>All extension fields are zero-padded to a word (four octets)
      boundary.  The Field Type field is specific to the defined
      function and is not elaborated here.  While the minimum field
      length containing required fields is four words (16 octets), a
      maximum field length remains to be established.</t>

      <t>The Length field is a 16-bit unsigned integer that indicates the
	length of the entire extension field in octets, including the
	Padding field.</t>

      <t>The Field Type contains the following sub-elements:</t>
      <t><figure title="Field Type Format">
          <artwork name="Field TYpe Format"><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+-------------------------------+ 
|R|E|O|I|   Code   Field Type   |       (Field Length)          |
+-------------------------------+-------------------------------+]]></artwork>
        </figure></t>
      <t>Where:</t>
      <t> R: 0 for a "Query", 1 for a "Response"</t>
      <t> E: 0 for "OK", 1 for an "Error"</t>
      <t> O: 0 for "MAC Required", 1 for "MAC Optional"</t>
      <t> I: 0 for "MAC Not Included", 1 for "MAC Included"</t>

      <t>The Code subtype is currently only used
      by <xref target="RFC5906">RFC 5906, Autokey</xref>.</t>

      <t>The Field Type, Value, and Padding fields are specific to the
	defined function and are not elaborated here; the Field Type value
	is defined in an IANA registry, and the Length, Value, and Padding
	values are defined by the document referred to by the registry.  If
	a host receives an extension field with an unknown Field Type, the
	host SHOULD ignore the extension field and MAY drop the packet
	altogether if policy requires it.</t>

      <t>While the minimum field length containing required fields is four
	words (16 octets), the maximum field length MUST NOT be longer than
	65532 octets due to the maximum size of the data represented by the
	Length field, and SHOULD be small enough that the size of the NTP
	packet received by the client does not exceed the smallest MTU
	between the sender and the recipient.</t>

      <t>The Length field is a 16-bit unsigned integer that indicates the
	length of the entire extension field in octets, including the
	Padding field.</t>

      </section>
      <section title="NEW: 7.5.1 Extension Fields and MACs">
	<t>With the inclusion of additional Extension Fields, there is now a
	  possibility of an ambiguous parsing of a legacy MAC.  If an
	  implementation offers even a modicum of care, there will be no
	  ambiguity when parsing an NTP packet that contains a legacy MAC.
	</t>
	<t>If an implementation uses the LAST-EF extension field, the
	presence of this field means "I am the last EF in this NTP Packet.
	Any subsequent packet data MUST be a legacy MAC."  In this case,
	there is no parsing ambiguity.</t>
	<t>If a system sends its MAC as a MAC-EF and does not send a legacy
	MAC, there is no parsing ambiguity.</t>
	<t>The only time there is a potential for a parsing ambiguity is
	when a legacy MAC is provided and neither of the previous two cases
	are present.  Even in this case, there is minimal risk.</t>
	<t>An Extension Field contains a 2-octet Field Type, a 2-octet Field
	Length, and any payload (data and/or padding).  If the NTP Packet
	parsing is at a point where it is evaluating data after the base
	packet, one of the following situations exists.  If the Field Length
	is not an even multiple of 4, we are not looking at an extension
	field.  In this case, the only possibility of having a valid packet
	is if the data is part of a legacy MAC.  If the Field Length is
	valid, i.e., an even multiple of 4 octets, one of the following
	three cases must be present.  First, the Field Length will be less
	than the remaining data.  This means subsequent data must parse as
	some number of Extension Fields, optionally follwed by a legacy MAC.
	Second, the Field Length will exactly match the remaining data.  The
	third case is where the Field Length is longer than the remaining
	packet data.  In this case, the current parse cannot be a valid
	extension field.</t>
	<t>Semantic checking may also be done to validate a potential legacy
	MAC.  A legacy MAC is a four-octet Key Identifier followed by a
	message digest.  The usual message digest is 16 octets long, but may
	be other sizes, depending on the digest algorithm.  In the Reference
	Implementation, a Key Identifier between 1 and 65535, inclusive, is
	a symmetric key, while a Key Identifier that is > 65535 is an
	Autokey <xref target="RFC5905">RFC 5905</xref>, or similar.  If the
	receiving system does not recognize the Key Identifier, the data
	CANNOT be a valid legacy MAC.  If the receiving system recognizes
	the Key Identifier, then it also has knowledge of the digest
	algorithm and can make sure the digest payload is the proper
	length.  If this is not the case, then the data CANNOT be a valid
	legacy MAC.</t>
	<t>It is trivial to parse the data after the base NTP packet and
	come up with a list of potential parsings.  A local policy choice
	can specify the precedence of the parsing options in this case.</t>
	<t>If none of the parsings validate, the packet fails
	authentication.  An implementation has three local policy choices
	available if LAST-EF is not used and a legacy MAC may be provided.
	First, the implementation may require EF-precedence.  Second, the
	implementation may require legacy-MAC-precedence.  Finally, the
	implementation may offer "best fit" precedence.  In this last case,
	the packet will meet one of the three following criteria: First,
	none of the parsings will match.  Again, this is a case of failed
	authentication.  Second, exactly one parsing will match and that
	parsing will be accepted.  Third, multiple parsings will match, in
	which case the implementation may choose its behavior.</t>
	<t>Additionally, most EFs will require a MAC.  If there is a
	syntactically-valid parsing that does not include a MAC but
	previously scanned EFs require a MAC, then in a multiple-choice
	parsing scenario where one of the choices does not include a MAC the
	"no MAC provided" choice SHOULD be eliminated.</t>
	<t>Note well that this rare situation can be completely avoided by
	using LAST-EF, or by indicating that no legacy MAC will be used.</t>
      </section>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The author wishes to acknowledge the contributions of Joey
      Saccadonuts.</t>
    </section>

    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo requests IANA to allocate NTP Extension Field Types
      0x0007 (I-Do), 0x2007 (I-Do, MAC OPTIONAL), 0x8007 (I-Do Response),
      and 0xA007 (I-Do Response, MAC OPTIONAL)for this proposal.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>Additional information TBD</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->

      &RFC2119;

      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5905.xml"?-->

      &RFC5905;

      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5906.xml"?-->

      &RFC5906;

      &RFC7821;
    </references>

    <!-- Here we use entities that we defined at the beginning. -->

    <!-- SW: Except that we're not really using these...

    <references title="Informative References">
      &RFC3552;

      &I-D.narten-iana-considerations-rfc2434bis;
 
    </references> 
     -->

    <!--
    <section anchor="app-additional" title="Additional Stuff">
      <t>This becomes an Appendix.</t>
    </section>
-->

    <!-- Change Log

v00 2016-03-NN  HMS: Initial Submission   
v01 2016-04-25  HMS: fix typo in the Response bit value
                                                                                        -->
  </back>
</rfc>
